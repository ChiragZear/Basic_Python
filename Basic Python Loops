#### Basic python loops with explanations ####

import math
import collections
import numpy as np
import pandas as pd
import matplotlib.pyplot as pp
%matplotlib inline  


for i in range(0, 10):
    print(i)

#### range(0, 10):
The range function generates a sequence of numbers starting from 0 and ending before 10. In this case, it generates the numbers 0 through 9.
range(0, 10) produces the sequence: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].
for i in range(0, 10)::
This is a for loop that iterates over each number in the sequence generated by range(0, 10).
The variable i takes on each value in the sequence one by one.
print(i):
Inside the loop, the print function is called with the current value of i.
This means that each number from the sequence will be printed on a new line. ####


for i in range(5):
    print(i)

#### range(5):
The range function generates a sequence of numbers starting from 0 and ending before 5. In this case, it generates the numbers 0 through 4.
range(5) produces the sequence: [0, 1, 2, 3, 4].
for i in range(5)::
This is a for loop that iterates over each number in the sequence generated by range(5).
The variable i takes on each value in the sequence one by one.
print(i):
Inside the loop, the print function is called with the current value of i.
This means that each number from the sequence will be printed on a new line. ####


for i in range(0, 10, 2):
    print(i)

#### range(0, 10, 2):
The range function generates a sequence of numbers starting from 0 and ending before 10, with a step size of 2. In other words, it generates the numbers 0, 2, 4, 6, and 8.
range(0, 10, 2) produces the sequence: [0, 2, 4, 6, 8].
for i in range(0, 10, 2)::
This is a for loop that iterates over each number in the sequence generated by range(0, 10, 2).
The variable i takes on each value in the sequence one by one.
print(i):
Inside the loop, the print function is called with the current value of i.
This means that each number from the sequence will be printed on a new line. ####


for count_25 in range(4+1):
    print(count_25)

#### range(4+1): The range function generates a sequence of numbers. In this case, 4+1 is evaluated first, which equals 5. 
Therefore, range(5) generates the sequence of numbers from 0 to 4 (inclusive of 0 and exclusive of 5). 
So, range(5) generates the numbers: [0, 1, 2, 3, 4].
for count_25 in range(4+1):: This is a for loop. It iterates over each number in the sequence generated by range(5). 
The variable count_25 takes on each value in the sequence one by one.
print(count_25): Inside the loop, the print function prints the current value of count_25.
Putting it all together, this code will print each number from 0 to 4, one per line. ####


for amount_25 in range(0, 100+1, 25):
    print(amount_25)

#### range(0, 100+1, 25): The range function in this case takes three arguments:
The start value (0). The end value (100+1), which is 101. The range will include numbers from 0 up to but not including 101.
The step value (25), which means the numbers will increase by 25 each time. So, range(0, 101, 25) generates the sequence of numbers: [0, 25, 50, 75, 100].
for amount_25 in range(0, 100+1, 25):: This is a for loop that iterates over each number in the sequence generated by range(0, 101, 25). 
The variable amount_25 takes on each value in the sequence one by one.
print(amount_25): Inside the loop, the print function prints the current value of amount_25.
Putting it all together, this code will print each number in the sequence [0, 25, 50, 75, 100], one per line. ####


combinations = []

for count_100 in range(1+1):
    for count_50 in range(2+1):
        for count_25 in range(4+1):
            for count_10 in range(10+1):
                for count_5 in range(20+1):
                    for count_1 in range(100+1):
                        if 100*count_100 + 50*count_50 + 25*count_25 + 10*count_10 + 5*count_5 + count_1 == 100:
                            combinations.append([count_100, count_50, count_25, count_10, count_5, count_1])

#### Initialization:
Initializes an empty list combinations to store valid combinations.
Nested Loops:
The code consists of nested for loops, which iterate over all possible combinations of counts for each denomination.
The loop variables (count_100, count_50, count_25, count_10, count_5, count_1) represent the count of each denomination in a particular combination.
The outer loop (count_100) ranges from 0 to 1, representing the count of 100-dollar bills.
The second loop (count_50) ranges from 0 to 2, representing the count of 50-dollar bills.
Similarly, the loops for count_25, count_10, count_5, and count_1 iterate over possible counts for their respective denominations.
Condition Check:
Inside the innermost loop, the code calculates the total value of the current combination using the counts of each denomination.
If the total value equals 100 (representing 100 cents or 1 dollar), the combination is considered valid.
If the condition is met, the combination (represented as a list of counts for each denomination) is appended to the combinations list. ####

combinations  
#### Gives all combinations ####

len(combinations)  
#### Gives total number of combinations ####


combinations_amounts = []

for amount_100 in range(0, 100+1, 100):
    for amount_50 in range(0, 100+1, 50):
        for amount_25 in range(0, 100+1, 25):
            for amount_10 in range(0, 100+1, 10):
                for amount_5 in range(0, 100+1, 5):
                    total_so_far = amount_100 + amount_50 + amount_25 + amount_10 + amount_5
                    
                    if total_so_far <= 100:
                        combinations_amounts.append([amount_100, amount_50, amount_25, amount_10, amount_5,
                                                     100 - total_so_far])

#### The code aims to find all possible combinations of coins (denominations of 100 cents, 50 cents, 25 cents, 10 cents, and 5 cents) that sum up to 1 dollar (100 cents) or less. 
The remaining amount to make up to exactly 1 dollar is assumed to be filled with pennies. ####
#### Initialization:
Initializes an empty list combinations_amounts to store valid combinations of coin amounts.
Nested Loops:
Iterates over possible amounts of 100 cents (0 or 100).
Iterates over possible amounts of 50 cents (0, 50, or 100).
Iterates over possible amounts of 25 cents (0, 25, 50, 75, or 100).
Iterates over possible amounts of 10 cents (0, 10, 20, 30, 40, 50, 60, 70, 80, 90, or 100).
Iterates over possible amounts of 5 cents (0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, or 100).
Calculating the Total So Far:
Sums the current amounts of each denomination to get total_so_far.
Checking the Condition:
Checks if the current total of the selected denominations is less than or equal to 100 cents (1 dollar).
Storing Valid Combinations:
If the condition is met, it appends the current combination to combinations_amounts.
The combination includes:
The amounts of each coin (100 cents, 50 cents, 25 cents, 10 cents, 5 cents).
The remaining amount to reach 100 cents, which is filled with pennies (100 - total_so_far). ####


#### The below code is just an example ####
total = 200
combinations = find_combinations(total)
print(f"Number of combinations for {total}: {len(combinations)}")
#### This will count and print how many different combinations of the given coin denominations add up to 200 ####


def find_combinations(total):
    combinations_amounts = []

    for amount_100 in range(0, total+1, 100):
        for amount_50 in range(0, total+1, 50):
            for amount_25 in range(0, total+1, 25):
                for amount_10 in range(0, total+1, 10):
                    for amount_5 in range(0, total+1, 5):
                        total_so_far = amount_100 + amount_50 + amount_25 + amount_10 + amount_5

                        if total_so_far <= total:
                            combinations_amounts.append([amount_100, amount_50, amount_25, amount_10, amount_5,
                                                         total - total_so_far])
    
    return combinations_amounts

#### Initialization:
combinations_amounts: A list to store all valid combinations.
Nested Loops:
Outer Loop (amount_100): Iterates over possible amounts of 100 (from 0 up to total, in steps of 100).
Second Loop (amount_50): Iterates over possible amounts of 50 (from 0 up to total, in steps of 50).
Third Loop (amount_25): Iterates over possible amounts of 25 (from 0 up to total, in steps of 25).
Fourth Loop (amount_10): Iterates over possible amounts of 10 (from 0 up to total, in steps of 10).
Innermost Loop (amount_5): Iterates over possible amounts of 5 (from 0 up to total, in steps of 5).
Combination Calculation:
total_so_far: Sums the amounts from the current iteration of each nested loop.
If total_so_far is less than or equal to total, it means the combination is valid.
Storing Combinations:
Each valid combination is stored as a list [amount_100, amount_50, amount_25, amount_10, amount_5, remaining].
remaining: The remaining amount needed to reach the total. ####

len(find_combinations(200))
#### The above code will return the total aggregate of combinations as 2728 ####

len(find_combinations(300))
#### The above code will return the total aggregate of combinations as 12318 ####


totals = range(100, 600, 100)
lengths = [len(find_combinations(total)) for total in totals]

#### range(100, 600, 100) generates a sequence of numbers starting at 100, ending before 600, and incrementing by 100.
This produces the list [100, 200, 300, 400, 500].
hension
Iteration:
The comprehension iterates through each total in [100, 200, 300, 400, 500].
Function Call:
For each total, it calls find_combinations(total).
Length Calculation:
The find_combinations function returns a list of combinations.
The len function computes the length of this list, i.e., the number of combinations.
List Construction:
These lengths are collected into a new list lengths. ####

print(lengths)
#### The above code will return a list [293, 2728, 12318, 38835, 98411] ####

pp.plot(totals, lengths)
#### This code gives a line chart representation of the totals and the aggregate number of the possible combinations ####

#### I hope these help you in understanding some basics on loops, THANK_YOU ####
